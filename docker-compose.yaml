version: '3.9'
services:
  db:
    image: 'postgres:15-alpine'
    environment:
      POSTGRES_DB: '${DB_NAME:-whaticket}'
      POSTGRES_USER: '${DB_USER:-whaticket}'
      POSTGRES_PASSWORD: '${DB_PASS:-mude}'
      TZ: '${TZ:-America/Sao_Paulo}'
    volumes:
      - 'pg_data:/var/lib/postgresql/data'
    healthcheck:
      test:
        - CMD-SHELL
        - 'pg_isready -U $${POSTGRES_USER:-postgres} -d $${POSTGRES_DB:-postgres}'
      interval: 10s
      timeout: 5s
      retries: 30
    restart: unless-stopped

  redis:
    image: 'redis:7-alpine'
    command:
      - redis-server
      - '--appendonly'
      - 'yes'
      - '--maxmemory-policy'
      - allkeys-lru
    environment:
      TZ: '${TZ:-America/Sao_Paulo}'
    volumes:
      - 'redis_data:/data'
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      interval: 10s
      timeout: 5s
      retries: 30
    restart: unless-stopped

  api:
    build:
      context: 'https://github.com/gian0205/whaticketsaas.git#master'
      dockerfile: backend/Dockerfile
      args:
        GIT_REPO: 'https://github.com/gian0205/whaticketsaas.git'
        GIT_REF: master
    environment:
      TZ: '${TZ:-America/Sao_Paulo}'
      NODE_ENV: production
      PORT: '4000'
      PUBLIC_DOMAIN: '${PUBLIC_DOMAIN}'
      BACKEND_URL: '${SERVICE_FQDN_API}'
      FRONTEND_URL: '${SERVICE_FQDN_WEB}'
      DB_DIALECT: postgres
      DB_HOST: db
      DB_PORT: '5432'
      DB_USER: '${DB_USER:-whaticket}'
      DB_PASS: '${DB_PASS:-mude}'
      DB_NAME: '${DB_NAME:-whaticket}'
      REDIS_HOST: redis
      REDIS_PORT: '6379'
      REDIS_URL: 'redis://redis:6379'
      JWT_SECRET: '${JWT_SECRET:-troque}'
      JWT_REFRESH_SECRET: '${JWT_REFRESH_SECRET:-troque2}'
      RUN_SEEDS: '${RUN_SEEDS:-true}'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - 'storage:/app/public'
    command: "sh -lc '
      set -e;

      echo \"[boot] instalando socat...\";

      if command -v socat >/dev/null 2>&1; then
        echo \"[boot] socat jÃ¡ presente.\";
      else
        if command -v apk >/dev/null 2>&1; then
          apk add --no-cache socat >/dev/null 2>&1 || true;
        elif command -v apt-get >/dev/null 2>&1; then
          apt-get update -y >/dev/null 2>&1 || true;
          apt-get install -y socat >/dev/null 2>&1 || true;
          rm -rf /var/lib/apt/lists/* || true;
        elif command -v yum >/dev/null 2>&1; then
          yum install -y socat >/dev/null 2>&1 || true;
        fi
      fi

      echo \"[boot] iniciando proxy local Redis...\";
      ( nohup socat TCP-LISTEN:6379,fork,reuseaddr TCP:redis:6379 >/dev/null 2>&1 & );

      echo \"[boot] garantindo sequelize-cli...\";
      command -v sequelize >/dev/null 2>&1 || npm i -g sequelize-cli >/dev/null 2>&1 || true;

      cd /app;
      node -e \"require(\\\"pg\\\");require(\\\"pg-hstore\\\")\" >/dev/null 2>&1 || (echo \"[boot] instalando pg/pg-hstore...\"; npm i --omit=dev pg pg-hstore);

      DB_URL=\"postgres://$$DB_USER:$$DB_PASS@$$DB_HOST:$$DB_PORT/$$DB_NAME\";

      MP=\"/app/dist/database/migrations\"; [ -d \"$$MP\" ] || MP=\"/app/src/database/migrations\";
      if [ -d \"$$MP\" ]; then
        echo \"[boot] rodando migrations em $$MP...\";
        sequelize db:migrate --url \"$$DB_URL\" --migrations-path \"$$MP\" || true;
      else
        echo \"[boot] nenhuma pasta de migrations encontrada (ok).\";
      fi;

      if [ \"$$RUN_SEEDS\" = \"true\" ] && [ ! -f \"/app/.seeds_ran\" ]; then
        for SP in /app/dist/database/seeds /app/src/database/seeds; do
          if [ -d \"$$SP\" ]; then
            echo \"[boot] rodando seeds em $$SP...\";
            sequelize db:seed:all --url \"$$DB_URL\" --seeders-path \"$$SP\" || true;
            touch /app/.seeds_ran;
            break;
          fi;
        done;
      fi;

      echo \"[boot] iniciando servidor...\";
      node dist/server.js 2>/dev/null || node dist/app.js 2>/dev/null || npm start
    '"
    restart: unless-stopped
    image: ''

  web:
    build:
      context: 'https://github.com/gian0205/whaticketsaas.git#master'
      dockerfile: frontend/Dockerfile
      args:
        GIT_REPO: 'https://github.com/gian0205/whaticketsaas.git'
        GIT_REF: master
        VITE_BACKEND_URL: '${SERVICE_FQDN_API}'
        REACT_APP_BACKEND_URL: '${SERVICE_FQDN_API}'
    environment:
      TZ: '${TZ:-America/Sao_Paulo}'
    depends_on:
      api:
        condition: service_started
    restart: unless-stopped
    image: ''

volumes:
  pg_data: null
  redis_data: null
  storage: null
