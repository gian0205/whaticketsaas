version: '3.9'
services:
  db:
    image: 'postgres:15-alpine'
    environment:
      POSTGRES_DB: '${DB_NAME:-whaticket}'
      POSTGRES_USER: '${DB_USER:-whaticket}'
      POSTGRES_PASSWORD: '${DB_PASS:-mude}'
      TZ: '${TZ:-America/Sao_Paulo}'
    volumes:
      - 'pg_data:/var/lib/postgresql/data'
    healthcheck:
      test:
        - CMD-SHELL
        - 'pg_isready -U $${POSTGRES_USER:-postgres} -d $${POSTGRES_DB:-postgres}'
      interval: 10s
      timeout: 5s
      retries: 30
    restart: unless-stopped
  redis:
    image: 'redis:7-alpine'
    command:
      - redis-server
      - '--appendonly'
      - 'yes'
      - '--maxmemory-policy'
      - allkeys-lru
    environment:
      TZ: '${TZ:-America/Sao_Paulo}'
    volumes:
      - 'redis_data:/data'
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      interval: 10s
      timeout: 5s
      retries: 30
    restart: unless-stopped
  api:
    build:
      context: 'https://github.com/gian0205/whaticketsaas.git#master'
      dockerfile: backend/Dockerfile
      args:
        GIT_REPO: 'https://github.com/gian0205/whaticketsaas.git'
        GIT_REF: master
    environment:
      TZ: '${TZ:-America/Sao_Paulo}'
      NODE_ENV: production
      PORT: '4000'
      PUBLIC_DOMAIN: '${PUBLIC_DOMAIN:-whaticket.nepal.decorafit.com.br}'
      BACKEND_URL: 'https://api.whaticket.nepal.decorafit.com.br'
      FRONTEND_URL: 'https://whaticket.nepal.decorafit.com.br'
      DB_DIALECT: postgres
      DB_HOST: db
      DB_PORT: '5432'
      DB_USER: '${DB_USER:-whaticket}'
      DB_PASS: '${DB_PASS:-mude}'
      DB_NAME: '${DB_NAME:-whaticket}'
      REDIS_HOST: redis
      REDIS_PORT: '6379'
      JWT_SECRET: '${JWT_SECRET:-troque}'
      JWT_REFRESH_SECRET: '${JWT_REFRESH_SECRET:-troque2}'
      RUN_SEEDS: '${RUN_SEEDS:-true}'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - 'storage:/app/public'
    command: "sh -lc '\n  set -e;\n  echo \"[boot] garantindo sequelize-cli...\";\n  command -v sequelize >/dev/null 2>&1 || npm i -g sequelize-cli >/dev/null 2>&1 || true;\n\n  # garante driver do Postgres (caso nÃ£o esteja na imagem final)\n  cd /app;\n  node -e \"require(\\\"pg\\\");require(\\\"pg-hstore\\\")\" >/dev/null 2>&1 || (echo \"[boot] instalando pg/pg-hstore...\"; npm i --omit=dev pg pg-hstore);\n\n  # monta URL do banco\n  DB_URL=\"postgres://$$DB_USER:$$DB_PASS@$$DB_HOST:$$DB_PORT/$$DB_NAME\";\n\n  # migrations (prefere dist/, fallback src/)\n  MP=\"/app/dist/database/migrations\"; [ -d \"$$MP\" ] || MP=\"/app/src/database/migrations\";\n  if [ -d \"$$MP\" ]; then\n    echo \"[boot] rodando migrations em $$MP...\";\n    sequelize db:migrate --url \"$$DB_URL\" --migrations-path \"$$MP\" || true;\n  else\n    echo \"[boot] nenhuma pasta de migrations encontrada (ok).\";\n  fi\n\n  # seeds (opcional)\n  if [ \"$$RUN_SEEDS\" = \"true\" ]; then\n    SP=\"/app/dist/database/seeders\"; [ -d \"$$SP\" ] || SP=\"/app/src/database/seeders\";\n    if [ -d \"$$SP\" ]; then\n      echo \"[boot] rodando seeds em $$SP...\";\n      sequelize db:seed:all --url \"$$DB_URL\" --seeders-path \"$$SP\" || true;\n    else\n      echo \"[boot] nenhuma pasta de seeders encontrada (ok).\";\n    fi\n  fi\n\n  echo \"[boot] iniciando servidor...\";\n  node dist/server.js 2>/dev/null || node dist/app.js 2>/dev/null || npm start || node dist/index.js\n'\n"
    restart: unless-stopped
    image: ''
  web:
    build:
      context: 'https://github.com/gian0205/whaticketsaas.git#master'
      dockerfile: frontend/Dockerfile
      args:
        GIT_REPO: 'https://github.com/gian0205/whaticketsaas.git'
        GIT_REF: master
        VITE_BACKEND_URL: https://api.whaticket.nepal.decorafit.com.br
        REACT_APP_BACKEND_URL: https://api.whaticket.nepal.decorafit.com.br
    environment:
      TZ: '${TZ:-America/Sao_Paulo}'
    depends_on:
      api:
        condition: service_started
    restart: unless-stopped
    image: ''
volumes:
  pg_data: null
  redis_data: null
  storage: null

